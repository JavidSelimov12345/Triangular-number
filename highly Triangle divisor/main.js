
"use strict"
// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?


let number =0;
let n=1;
while(number==0){
    var count=0;
    var trinum=(n*(n+1))/2;
    for(let i=1;i<=Math.sqrt(trinum);i++){
        if(trinum%i==0){
            count+=2;
        }
    }
    if(count>500){
        number=trinum;
        break;
    }
    n+=1;
    console.log(count,trinum,n);
}
console.log(number);















//************************************piti way
// let divisor = 500;
// let cons = 0;
// let total =0;
// let arraya=[];
// let count=1000;

// function arrayCreator (cons,total,arraya){


//     for(let i=1;i<=20000;i++){
//         cons+=1;
//         total+=cons;
//        arraya.push(total); 
       
//     }
    

// }

//  arrayCreator(cons,total,arraya);
//  for(let i=0;i<arraya.length;i++){
//       console.log(arraya[i])
//  }

 
 
//  function New(array,number){

//     console.log(array[number])
//     let divide=1;
//     count=0

//   let ar2=[]

//     for(let i=0;i<arraya.length;i++){
//         for(let i=0;i<array[number];i++){
//         if(array[number]%divide==0){
//              ar2.push(divide); 
//              count++;
//              console.log(divide);
//              divide++;

          
//         }
//         if(array[number]%divide!=0){
//             divide++;
           
//         }  
         
//     }
//     }

//         console.log(count-1);
   
//  }

//  function looper (array){


//     for(let i=0;i<array.length;i++){
//         New(array,i);
//     }
    
//  }
 
// looper(arraya)
 
 //*****************************************second way */
 
